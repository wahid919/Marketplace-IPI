<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\StrukturOrganisasi;
    use app\models\search\StrukturOrganisasiSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use app\models\Action;
use app\components\UploadFile;
use Yii;
use yii\web\UploadedFile;

/**
* StrukturOrganisasiController implements the CRUD actions for StrukturOrganisasi model.
*/
class StrukturOrganisasiController extends Controller
{
    use UploadFile;


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;
public function behaviors()
{
//NodeLogger::sendLog(Action::getAccess($this->id));
//apply role_action table for privilege (doesn't apply to super admin)
return Action::getAccess($this->id);
}

/**
* Lists all StrukturOrganisasi models.
* @return mixed
*/
public function actionIndex()
{
    $searchModel  = new StrukturOrganisasiSearch;
    $dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
    'searchModel' => $searchModel,
]);
}

/**
* Displays a single StrukturOrganisasi model.
* @param integer $id
*
* @return mixed
*/
public function actionView($id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

return $this->render('view', [
'model' => $this->findModel($id),
]);
}

/**
* Creates a new StrukturOrganisasi model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
    {
        $model = new StrukturOrganisasi;

        try {
            if ($model->load($_POST)) {
                $foto = UploadedFile::getInstance($model, 'foto');
                $response = $this->uploadFile($foto,'struktur_organisasi');
                if ($response->success == false) {
                    Yii::$app->session->setFlash('danger', 'Gagal Upload Foto');
                    // goto end;
                    return $this->render('create', ['model' => $model]);
                }
                $model->foto = $response->filename;
                // if ($gambar != NULL) {
                //     # store the source gambars name
                //     $model->gambar = $gambar->name;
                //     $arr = explode(".", $gambar->name);
                //     $extension = end($arr);

                //     # generate a unique gambars name
                //     $model->gambar = Yii::$app->security->generateRandomString() . ".{$extension}";

                //     # the path to save gambars
                //     // unlink(Yii::getAlias("@app/web/uploads/pengajuan/") . $oldFile);
                //     if (file_exists(Yii::getAlias("@app/web/uploads/berita/")) == false) {
                //         mkdir(Yii::getAlias("@app/web/uploads/berita/"), 0777, true);
                //     }
                //     $path = Yii::getAlias("@app/web/uploads/berita/") . $model->gambar;
                //     $gambar->saveAs($path);
                // }
                if ($model->save()) {
                    return $this->redirect(['view', 'id' => $model->id]);
                }
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }
        return $this->render('create', ['model' => $model]);
    }

/**
* Updates an existing StrukturOrganisasi model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $oldfoto = $model->foto;

        if ($model->load($_POST)) {
            $foto = UploadedFile::getInstance($model, 'foto');
            if ($foto != NULL) {
                $response = $this->uploadFile($foto,'struktur_organisasi');
                if ($response->success == false) {
                    Yii::$app->session->setFlash('danger', 'Gagal Upload Foto');
                    // goto end;
                    return $this->render('update', ['model' => $model]);
                }
                $model->foto = $response->filename;
                // # store the source file name
                // $model->foto = $foto->name;
                // $arr = explode(".", $foto->name);
                // $extension = end($arr);

                // # generate a unique file name
                // $model->foto = Yii::$app->security->generateRandomString() . ".{$extension}";

                // # the path to save file
                // if (file_exists(Yii::getAlias("@app/web/uploads/struktur_organisasi/")) == false) {
                //     mkdir(Yii::getAlias("@app/web/uploads/struktur_organisasi/"), 0777, true);
                // }
                // $path = Yii::getAlias("@app/web/uploads/struktur_organisasi/") . $model->foto;
                if ($oldfoto != NULL) {

                    // $foto->saveAs($path);
                    // unlink(Yii::$app->basePath . '/web/uploads/struktur_organisasi/' . $oldfoto);
                    $this->deleteFile("struktur_organisasi",$oldfoto);
                }
                //  else {
                //     $foto->saveAs($path);
                // }
            } else {
                $model->foto = $oldfoto;
            }
            
            $model->save();
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

/**
* Deletes an existing StrukturOrganisasi model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
    $model = $this->findModel($id);
    $model->flag = 1;
$model->save();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the StrukturOrganisasi model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return StrukturOrganisasi the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = StrukturOrganisasi::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
